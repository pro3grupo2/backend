# Docker compose file
networks:
  internalNetwork:
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/24"

services:
  nodejs:
    build: ./source

    ports:
      - "3000:3000"

    volumes:
      - ./source/proyectos3:/proyectos3/proyectos3 # Quitar en producción para que no se pueda modificar el código
      - ./out/files:/files

    networks:
      internalNetwork:
        ipv4_address: 172.19.0.3

    depends_on:
      mysql:
        condition: service_healthy

      redis:
        condition: service_healthy

    restart: always

  mysql:
    image: mysql:8.3.0

    environment:
      MYSQL_ROOT_PASSWORD: PR0Y3C7053R00T
      MYSQL_DATABASE: proyectos3
      MYSQL_USER: proyectos3
      MYSQL_PASSWORD: PR0Y3C7053

#    ports:
#      - "3306:3306"

    command: [
      '--wait_timeout=31536000'
    ]

    volumes:
      - ./out/mysql:/var/lib/mysql/
      - ./source/databases/mysql:/docker-entrypoint-initdb.d

    networks:
      internalNetwork:
        ipv4_address: 172.19.0.2

    healthcheck:
      test: [ 'CMD', 'mysqladmin', 'ping', '-h', 'localhost' ]
      timeout: 20s
      retries: 10

    restart: always

  redis:
    image: redis:7.2.4

    command: redis-server --requirepass PR0Y3C7053

    volumes:
      - ./out/redis:/data

    networks:
      internalNetwork:
        ipv4_address: 172.19.0.4

#    ports:
#      - "6379:6379"

    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      timeout: 20s
      retries: 10

    restart: always